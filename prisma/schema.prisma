// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  role        Role     @default(UNDEFINED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions    Session[]
  accounts    Account[]

  hairdresser Hairdresser?
  client      Client?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken              String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Hairdresser {
  id        String   @id @default(uuid())
  userId    String   @unique
  salonName String
  bio       String?
  location  String
  services  Service[]
  appointments Appointment[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id        String   @id @default(uuid())
  userId    String   @unique
  phone     String
  address   String
  appointments Appointment[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id            String   @id @default(uuid())
  hairdresserId String
  name          String
  description   String?
  price         Float

  hairdresser   Hairdresser @relation(fields: [hairdresserId], references: [id])
  appointments  Appointment[]
}

model Appointment {
  id            String   @id @default(uuid())
  clientId      String
  hairdresserId String
  serviceId     String
  date          DateTime
  status        AppointmentStatus @default(PENDING)

  client        Client      @relation(fields: [clientId], references: [id])
  hairdresser   Hairdresser @relation(fields: [hairdresserId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])
}

enum Role {
  UNDEFINED
  CLIENT
  HAIRDRESSER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
